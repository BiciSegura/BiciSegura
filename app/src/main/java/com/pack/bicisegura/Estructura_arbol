package com.pack.bicisegura;

 class NodoAvl<E extends Comparable<?super E>>{
    public E value;
    public NodoAvl<E> left;
    public NodoAvl<E> rigth;
    public int heigth;


    public NodoAvl(E value){
        this.value = value;
        this.left = null;
        this.rigth = null;
        this.heigth= 1;
    }
     public E getValue(){
         return this.value;
     }
     public void setValue(E value){
         this.value = value;
     }
     public int getHeigth(){
         return this.heigth;
     }
 }

 public class Estructura_arbol<E extends Comparable<?super E>>{


     public NodoAvl<E> root;
     public int heigthleft=0;
     public int heigthrigth=0;

     public Estructura_arbol(){
         this.root = null;
     }
//METODO PARA HALLAR LA ALTURA DE UN ARBOL
     public int altura(NodoAvl root){

         if(this.root != null){

             if(this.root.left != null ){
                 heigthleft += 1;
                 altura(root.left);}
             else if(this.root.rigth != null ){
                 heigthrigth += 1;
                 altura(root.left);}

         }else{
             if(heigthleft > heigthrigth){
                 root.heigth=heigthleft;
             }else if (heigthleft == heigthrigth){
                 root.heigth=heigthleft;

             }else {
                 root.heigth=heigthrigth;
             }

         }
         return root.heigth;

     }
     public void insert(T value){
         this.root = this.insert(value, this.root);
     }

     private AVLNode<T> insert(T value, AVLNode<T> node){
         if(node == null){
             return new AVLNode<>(value);
         }else{
             int resultCompare = node.value.compareTo(value);
             if(resultCompare == 1) {
                 node.leftSon = this.insert(value, node.rightSon);
             }  // > - 1
             else if(resultCompare == -1) {
                 node.rightSon = this.insert(value, node.leftSon);
             } // < -1
             else {}
             return node; // == 0
         }
     }

    public E findmind(Estructura_arbol root){
        E result=null;
        // caso de un arbol con tan solo dos hijos
        if(this.root.left.value > this.root.value && this.root.value < this.root.rigth.value ){
            result = this.root.value;
            return result;
        }
        while(root != null){
            if (this.root.left.value < this.root.rigth.value){
                result= this.root.left.value;
                root = this.root.left.value;
            }else{
                result = this.root.value;

            }
        }
        return result;

    }
    public E findmax(Estructura_arbol root){
        E result=null;
        // caso de un arbol con tan solo dos hijos
        if(this.root.left.value < this.root.value && this.root.value > this.root.rigth.value ){
            result = this.root.value;
            return result;
        }
        while(root != null){
            if (this.root.left.value < this.root.rigth.value){
                result= this.root.rigth.value;
                root = this.root.rigth.value;
            }else{
                result = this.root.value;

            }
        }
        return result;

    }

}}