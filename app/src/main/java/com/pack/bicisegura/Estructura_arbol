package com.pack.bicisegura;
//import java.util.math;

 class NodoAvl<E extends Comparable<?super E>>{
    public E value;
    public NodoAvl<E> left;
    public NodoAvl<E> rigth;
    public int heigth;


    public NodoAvl(E value){
        this.value = value;
        this.left = null;
        this.rigth = null;
        this.heigth= -1;
    }
     public E getValue(){
         return this.value;
     }
     public void setValue(E value){
         this.value = value;
     }
     public int getHeigth(){
         return this.heigth;
     }
     public void setHeigth(int heigth){
         this.heigth = heigth;
     }
 }

 public class Estructura_arbol<E extends Comparable<?super E>>{


     public NodoAvl<E> root;
     public int heigthleft=0;
     public int heigthrigth=0;

     public Estructura_arbol(){
         this.root = null;
     }
//METODO PARA HALLAR LA ALTURA DE UN ARBOL
     public int altura(NodoAvl root){

         if(this.root != null){
                return 1 + Math.max(altura(root.left), altura(root.rigth));
            /* if(this.root.left != null ){
                 heigthleft += 1;
                 altura(root.left);}
             else if(this.root.rigth != null ){
                 heigthrigth += 1;
                 altura(root.left);}*/

         }else{
             return 0;
             /*if(heigthleft > heigthrigth){
                 root.heigth=heigthleft;
             }else if (heigthleft == heigthrigth){
                 root.heigth=heigthleft;

             }else {
                 root.heigth=heigthrigth;
             }*/

         }
         //return root.heigth;

     }
     public void insert(E value){
         this.root = this.insert(value, this.root);
     }

     private NodoAvl<E> insert(E value, NodoAvl<E> node){
         if(node == null){
             return new NodoAvl<>(value);
         }else{
             int resultCompare = node.value.compareTo(value);
             if(resultCompare == 1) {
                 node.left = this.insert(value, node.rigth);
             }  // > - 1
             else if(resultCompare == -1) {
                 node.rigth = this.insert(value, node.left);
             } // < -1
             else {}
             return node; // == 0
         }
     }

    /*public E findmind(Estructura_arbol root){
        E result=null;
        // caso de un arbol con tan solo dos hijos
        if(this.root.left.value > this.root.value && this.root.value < this.root.rigth.value ){
            result = this.root.value;
            return result;
        }
        while(root != null){
            if (this.root.left.value < this.root.rigth.value){
                result= this.root.left.value;
                root = this.root.left.value;
            }else{
                result = this.root.value;

            }
        }
        return result;

    }*/
     /*public void remove(E value){

     }*/
    public void remove( E x )
    {
        root = remove( x, root );
    }

     private NodoAvl<E> remove( E x, NodoAvl<E> t )
     { if( t == null )

         return t; // Item not found; do nothing
         int compareResult = x.compareTo( t.value );
         if( compareResult < 0 )
             t.left = remove( x, t.left );
         else if( compareResult > 0 )
             t.rigth = remove( x, t.rigth );
         else if( t.left != null && t.rigth != null ) // Two children
         { t.value = findMin( t.rigth ).value;
             t.rigth = remove( t.value, t.rigth );
         }
         else
             t = ( t.left != null ) ? t.left : t.rigth;
         return t;
     }


     public E findMin(){
         return this.findMin(this.root).value;
     }

     private NodoAvl<E> findMin(NodoAvl<E> node){
         if(node.left == null)
             return node;
         else
             return this.findMin(node.left);
     }

     public E findMax(){
         return this.findMin(this.root).value;
     }

     private NodoAvl<E> findMax(NodoAvl<E> node){
         if(node.rigth == null)
             return node;
         else
             return this.findMin(node.rigth);
     }

     //public boolean contains(T value){

     //}

     public void makeEmpty(){
         this.root = null;
     }

     public boolean isEmpty(){
         return this.root == null;
     }

    /*public E findmax(Estructura_arbol root){
        E result=null;
        // caso de un arbol con tan solo dos hijos
        if(this.root.left.value < this.root.value && this.root.value > this.root.rigth.value ){
            result = this.root.value;
            return result;
        }
        while(root != null){
            if (this.root.left.value < this.root.rigth.value){
                result= this.root.rigth.value;
                root = this.root.rigth.value;
            }else{
                result = this.root.value;

            }
        }
        return result;

    }*/

     private boolean findValue(E value, NodoAvl<E> node){

         int resultCompare = node.value.compareTo(value);

         if(resultCompare == 0){
             return true;
         }
         else if(resultCompare == 1) {
            // node.left = this.findValue(value, node.rigth);
             return findValue(value, node.left);
         }  // > - 1
         else if(resultCompare == -1) {
             return findValue(value, node.rigth);
         } // < -1
         else {
             return false;
         }

     }
     private void SigleRotateRight (NodoAvl<E> node){

     }
     private void SingleRotateLeft (NodoAvl<E> node){

     }
     private void DobleRotateRigth(NodoAvl<E> node){

     }
     private void DobleRotateLeft(NodoAvl<E> node){

     }

 }
